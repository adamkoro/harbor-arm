- name: Build Harbor arm
  hosts: all
  gather_facts: true
  become: true
  vars:
    harbor_root_dir: "/root/goharbor"
    harbor_custom_git_repo: "https://github.com/adamkoro/harbor-arm.git"
    pushimage: "true"
  tasks:
    - name: Check if exits {{ harbor_root_dir }}
      ansible.builtin.stat:
        path: "{{ harbor_root_dir }}"
      register: stat_harbor_root_dir_output

    - name: Remove previus {{ harbor_root_dir }}
      ansible.builtin.file:
        path: "{{ harbor_root_dir }}"
        state: absent
      when: stat_harbor_root_dir_output.stat.exists

    - name: Download harbor-arm repo
      ansible.builtin.git:
        repo: "{{ harbor_custom_git_repo }}"
        dest: "{{ harbor_root_dir }}"
        version: main
        force: true

    - name: Download Harbor from Github
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: download
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Prepare Harbor arm data
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: prepare_arm_data
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Prepare Harbor for arm64 architecture
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: pre_update
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Compile Harbor components for arm64 architecture
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: compile
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          COMPILETAG: compile_golangimage

    - name: Build Harbor arm64 image
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: build
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          GOBUILDTAGS: "include_oss include_gcs"
          BUILDBIN: "true"
          NOTARYFLAG: "true"
          TRIVYFLAG: "true"
          GEN_TLS: "true"
          PULL_BASE_FROM_DOCKERHUB: "false"

    - name: Requirment for image push
      ansible.builtin.apt:
        name:
          - golang
      when: pushimage == "true"

    - name: Push images to registry
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: pushimage
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          REGISTRYSERVER: "{{ registry_server }}"
          REGISTRYUSER: "{{ registry_user }}"
          REGISTRYPASSWORD: "{{ registry_password }}"
      when: pushimage == "true"
