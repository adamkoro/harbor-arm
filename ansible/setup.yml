- name: Build Harbor arm
  hosts: all
  gather_facts: true
  become: true
  vars:
    harbor_root_dir: "/root/goharbor"
    harbor_custom_git_repo: "https://github.com/adamkoro/harbor-arm.git"
    pushimage: "false"
  tasks:
  # this section from: https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-22-04
    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: present
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present
      when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04" and ansible_distribution_release == "jammy"

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: present
        update_cache: true
        install_recommends: true

    - name: Install Docker Module for Python
      ansible.builtin.pip:
        name: docker
        state: present

    - name: Check if docker is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Install binfmt
      community.docker.docker_container:
        name: binfmt
        image: tonistiigi/binfmt:latest
        command: --install all
        privileged: true
        state: started
        cleanup: true
        detach: false

    - name: Get buildx setting
      ansible.builtin.command: docker buildx ls
      register: buildx_output
      changed_when: false

    - name: Check if arm64 is enabled
      ansible.builtin.debug:
        msg: "arm64 is enabled"
      when: buildx_output is search("linux/arm64")

    - name: Check if arm64 is not enabled
      ansible.builtin.fail:
        msg: "arm64 is not enabled"
      when: buildx_output is not search("linux/arm64")

    - name: Check if exits {{ harbor_root_dir }}
      ansible.builtin.stat:
        path: "{{ harbor_root_dir }}"
      register: stat_harbor_root_dir_output

    - name: Remove previus {{ harbor_root_dir }}
      ansible.builtin.file:
        path: "{{ harbor_root_dir }}"
        state: absent
      when: stat_harbor_root_dir_output.stat.exists

    - name: Download harbor-arm repo
      ansible.builtin.git:
        repo: "{{ harbor_custom_git_repo }}"
        dest: "{{ harbor_root_dir }}"
        version: main
        force: true

    - name: Download Harbor from Github
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: download
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Prepare Harbor arm data
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: prepare_arm_data
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Prepare Harbor for arm64 architecture
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: pre_update
        file: "{{ harbor_root_dir }}/Makefile"

    - name: Compile Harbor components for arm64 architecture
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: compile
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          COMPILETAG: compile_golangimage

    - name: Build Harbor arm64 image
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: build
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          GOBUILDTAGS: "include_oss include_gcs"
          BUILDBIN: "true"
          NOTARYFLAG: "true"
          TRIVYFLAG: "true"
          GEN_TLS: "true"
          PULL_BASE_FROM_DOCKERHUB: "false"

    - name: Push images to registry
      community.general.make:
        chdir: "{{ harbor_root_dir }}"
        target: pushimage
        file: "{{ harbor_root_dir }}/Makefile"
        params:
          REGISTRYSERVER: ""
          REGISTRYUSER: ""
          REGISTRYPASSWORD: ""

      when: pushimage == "true"
